// Layout of the trie nodes

// Node next index size
comptime trie_node_next_size = 4;

comptime max_nexts = 0x80;

// Node value offset
comptime trie_node_value = max_nexts * trie_node_next_size;

// Size of an entire trie node, including next pointers, attribute and value
comptime trie_node_size = trie_node_value + (4 + (4 + 8));

zeroes addr_value_trie_bytes[8];
zeroes last_addr_value_trie[8];

import "src/syscalls.co" syscalls;

fn init() [num_bytes] {
    num_bytes = 0x10000 * trie_node_size;
    addr_value_trie_bytes[0] = syscalls.anon_mmap(num_bytes);
}

fn alloc() {
    last_addr_value_trie[0] += 1;
    return last_addr_value_trie[0];
}

fn node_addr(node_idx) {
    return addr_value_trie_bytes[0] + (node_idx * trie_node_size);
}

fn trie_node_next(node_ptr, idx) [tmp] {
    @assert(idx < max_nexts);
    tmp = node_ptr + (idx * trie_node_next_size);
    return @read32(tmp);
}

fn trie_node_set_next(node_ptr, idx, next) [tmp] {
    @assert(idx < max_nexts);
    tmp = node_ptr + (idx * trie_node_next_size);
    @write32(tmp, next);
}

fn lookup(name, node) [addr, chr] {
    loop {
        chr = @read8(name);
        if(chr) {
            addr = node_addr(node);
            node = trie_node_next(addr, chr);
            name += 1;
            if(node) {
                continue;
            } else {
                node = alloc();
                trie_node_set_next(addr, chr, node);
                continue;
            }
        } else {
            return node;
        }
    }
}

comptime type_offset = trie_node_value;

fn node_get_type(node) {
    node = node_addr(node);
    node += type_offset;
    return @read32(node);
}

fn node_set_type(node, value) {
    node = node_addr(node);
    node += type_offset;
    return @write32(node, value);
}

comptime attribute_offset = type_offset + 4;

fn node_get_attribute(node) {
    node = node_addr(node);
    node += attribute_offset;
    return @read32(node);
}

fn node_set_attribute(node, value) {
    node = node_addr(node);
    node += attribute_offset;
    return @write32(node, value);
}

comptime value_offset = attribute_offset + 4;

fn node_get_value(node) {
    node = node_addr(node);
    node += value_offset;
    return node[0];
}

fn node_set_value(node, value) {
    node = node_addr(node);
    node += value_offset;
    node[0] = value;
    return;
}
