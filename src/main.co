// Low level code, establish what's needed for @todo() and @assert()
import "src/printer.co" printer;
import "src/syscalls.co" syscalls;

fn assert_fail(statement, file, line) {
    printer.print_string("Assertion failed: ");
    if(statement) {
        printer.print_string(statement);
    } else {
        printer.print_string("<unknown>");
    }
    printer.print_string(", at ");
    if(file) {
        printer.print_string(file);
    } else {
        printer.print_string("<unknown file>");
    }
    printer.print_string(": ");
    printer.print_decimal(line);

    printer.putchar('\n');
    printer.exit(1);
    unreachable;
}

// Everything else
import "src/compiler.co" compiler;
import "src/strings.co" strings;
import "src/x86_64.co" x86_64;
import "src/elf.co" elf;

fn identity(lmao) {
    return lmao;
}

fn main(argc, argv) [tmp, fd, out_filename, i] {
    if(argc < 3) {
        printer.print_string("Usage: ");
        if(argc) {
            tmp = argv[0];
            printer.print_string(tmp);
        } else {
            printer.print_string("comp");
        }
        printer.print_string(" <main file> <base addr>\n");
        printer.exit(1);
        unreachable;
    } else {
        out_filename = identity("out.elf");

        // Parse the binary base address
        tmp = argv[2 * 8];
        tmp = strings.parse_detect(tmp, 16);
        compiler.init(tmp);

        x86_64.init();
        elf.init();

        // Get the root source file
        tmp = argv[1 * 8];
        compiler.set_source_file(tmp);

        i = 3;
        loop {
            if(i < argc) {
                tmp = argv[i * 8];
                if(@read8(tmp) == '-') {
                    tmp += 1;
                    if(@read8(tmp) == 'o') {
                        out_filename = argv + ((i + 1) * 8);
                        out_filename = out_filename[0];
                        i += 2;
                        continue;
                    } else { }
                } else { }
                printer.print_string("Unknown argument!\n");
                printer.exit(1);
            } else {
                break;
            }
        }

        fd = syscalls.open(out_filename, 0x41, syscalls.executable);

        compiler.parse_top_level();

        elf.write(fd);
        printer.exit(0);
        unreachable;
    }
}
