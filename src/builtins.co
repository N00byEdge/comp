import "src/codegen.co" codegen;
import "src/identifier_types.co" itypes;
import "src/identifiers.co" idents;

enum {
    eval_comptime,
    eval_codegen,
};

zeroes builtin_root[8];

fn builtin_size_of(context) {
	@todo("builtin size_of");
}

fn builtin_embed(context) {
	@todo("builtin embed");
}

fn add_builtin(name, fptr, type) [node] {
	node = builtin_root[0];
	node = idents.lookup(name, node);

	@assert(idents.node_get_type(node) == itypes.none);
	idents.node_set_type(node, type);
	idents.node_set_value(node, fptr);
}

fn create_builtin_node() [val] {
	// Create the node itself
	builtin_root[0] = idents.alloc();

	val = builtin_root[0];

	add_builtin("size_of", builtin_size_of, itypes.builtin_function_comptime);
	add_builtin("embed", builtin_embed, itypes.builtin_function_comptime);
}
