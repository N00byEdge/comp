// Doesn't affect bss, otherwise we can't compile ourselves :^)
comptime max_section_bytes = 0x100000;

import "src/syscalls.co" syscalls;

enum {
    text,
    data,
    rodata,
    bss,

    end,
};

zeroes section_base_addrs[4 * 8];
zeroes current_section_bytes[4 * 8];
zeroes current_section_buf[3 * 8];

fn init(binary_base_addr) {
    section_base_addrs[0x00] = binary_base_addr + (max_section_bytes * 0);
    section_base_addrs[0x08] = binary_base_addr + (max_section_bytes * 1);
    section_base_addrs[0x10] = binary_base_addr + (max_section_bytes * 2);
    section_base_addrs[0x18] = binary_base_addr + (max_section_bytes * 3);

    current_section_buf[0x00] = syscalls.anon_mmap(max_section_bytes);
    current_section_buf[0x08] = syscalls.anon_mmap(max_section_bytes);
    current_section_buf[0x10] = syscalls.anon_mmap(max_section_bytes);
}

fn section_offset(section) {
    return current_section_bytes[section * 8];
}

fn section_addr(section) {
    return section_base_addrs[section * 8] + current_section_bytes[section * 8];
}

fn section_base(section) {
    return section_base_addrs[section * 8];
}

fn patch32(value, section, addr) {
    addr -= section_base_addrs[section * 8];
    addr += current_section_buf[section * 8];
    @write32(addr, value);
}

fn write_generic(value, section, num_bytes) [ptr] {
    if(section != bss) {
        ptr = current_section_buf[section * 8] + section_offset(section);
        @write64(ptr, value);
    } else {}
    current_section_bytes[section * 8] += num_bytes;
}

fn write_string(ptr, len, section) [retval, tmp] {
    retval = section_addr(section);
    loop {
        if(len) {
            tmp = @read8(ptr);
            write_generic(tmp, section, 1);
            len -= 1;
            continue;
        } else {
            return retval;
        }
    }
}

fn intern_string(ptr, len, section) {
    // TODO: Actually find an intern
    return write_string(ptr, len, section);
}

fn code_offset() {
    return section_offset(text);
}

fn code_addr() {
    return section_addr(text);
}

comptime dump_flags = syscalls.O_WRONLY | syscalls.O_CREAT;

fn dump_section(filename, section) [fd, addr, len] {
    fd = syscalls.open(filename, dump_flags, syscalls.normal_file);

    addr = current_section_buf[section * 8];
    len = current_section_bytes[section * 8];

    syscalls.write_all(fd, addr, len);

    syscalls.close(fd);
}

fn dump() [fd, addr] {
    dump_section("text_dump.bin", text);
    dump_section("rodata_dump.bin", rodata);
}
