import "src/writer.co" writer;
import "src/tokenizer.co" tokenizer;
import "src/identifier_types.co" itypes;
import "src/identifiers.co" idents;

zeroes target_arch[8];
zeroes target_os[8];

comptime target_arch_x86_64 = 0;
comptime target_arch_aarch64 = 1;

comptime target_os_linux = 0;
comptime target_os_florence = 1;

zeroes current_file_root[8];

fn peek_type() [node] {
    node = current_file_root[0];
    tokenizer.peek_type(node);
}

fn peek_value() [node] {
    node = current_file_root[0];
    tokenizer.peek_value(node);
}

fn discard() [node] {
    node = current_file_root[0];
    tokenizer.discard(node);
}

fn expect_token(tok, str) [node] {
    node = current_file_root[0];
    tokenizer.expect_token(tok, str, node);
}

zeroes continue_addr[8];

zeroes break_addr[8];
zeroes break_was_used[8];

zeroes switch_table[8]; // offset into rodata
zeroes switch_default_addr[8];
zeroes endcase_addr[8];
zeroes endcase_was_used[8];

comptime rewind_buffer_local_size = 0
    + (@size_of(continue_addr)
    + (@size_of(break_addr)
    + (@size_of(break_was_used)
    + (@size_of(switch_table)
    + (@size_of(switch_default_addr)
    + (@size_of(endcase_addr)
    + (@size_of(endcase_was_used)
)))))));

comptime rewind_buffer_size = rewind_buffer_local_size + (8 * 2);

fn rewind_save(rewind_buffer) {
    @memcpy(rewind_buffer, continue_addr, rewind_buffer_local_size);
    rewind_buffer[rewind_buffer_local_size + (8 * 0)] = writer.section_offset(writer.text);
    rewind_buffer[rewind_buffer_local_size + (8 * 1)] = writer.section_offset(writer.rodata);
}

fn rewind_restore(rewind_buffer) [ptr, len] {
    @memcpy(continue_addr, rewind_buffer, rewind_buffer_local_size);

    ptr = writer.current_section_buf[writer.text * 8];
    len = writer.section_offset(writer.text) - rewind_buffer[rewind_buffer_local_size + (8 * 0)];
    @memset(ptr, 0, len);

    writer.current_section_bytes[writer.text * 8] = rewind_buffer[rewind_buffer_local_size + (8 * 0)];

    ptr = writer.current_section_buf[writer.rodata * 8];
    len = writer.section_offset(writer.rodata) - rewind_buffer[rewind_buffer_local_size + (8 * 1)];
    @memset(ptr, 0, len);

    writer.current_section_bytes[writer.rodata * 8] = rewind_buffer[rewind_buffer_local_size + (8 * 1)];
}

zeroes add_symbol_ptr[8];

fn add_symbol(num_args, local_var_space, total_stack_space) {
    if(add_symbol_ptr[0]) {
        @call(add_symbol_ptr[0], num_args);
    } else {
        tokenizer.error("add_symbol not implemented!");
    }
}

zeroes function_prologue_ptr[8];

fn function_prologue(num_args, local_var_space, total_stack_space) {
    if(function_prologue_ptr[0]) {
        @call(function_prologue_ptr[0], num_args);
    } else {
        tokenizer.error("function_prologue not implemented!");
    }
}

zeroes return_evaluated_ptr[8];

fn return_evaluated() {
    if(return_evaluated_ptr[0]) {
        @call(return_evaluated_ptr[0]);
    } else {
        tokenizer.error("return_evaluated not implemented!");
    }
}

zeroes jmp_to_ptr[8];

fn jmp_to(addr) {
    if(jmp_to_ptr[0]) {
        @call(jmp_to_ptr[0], addr);
    } else {
        tokenizer.error("jmp_to not implemented!");
    }
}

zeroes do_call_addr_ptr[8];

fn do_call_addr(addr) {
    if(do_call_addr_ptr[0]) {
        @call(do_call_addr_ptr[0], addr);
    } else {
        tokenizer.error("do_call_addr not implemented!");
    }
}

zeroes make_switch_ptr[8];

fn make_switch() {
    if(make_switch_ptr[0]) {
        @call(make_switch_ptr[0]);
    } else {
        tokenizer.error("make_switch not implemented!");
    }
}

zeroes make_loop_break_ptr[8];

fn make_loop_break() {
    if(make_loop_break_ptr[0]) {
        @call(make_loop_break_ptr[0]);
    } else {
        tokenizer.error("make_loop_break not implemented!");
    }
}

zeroes loop_break_to_here_ptr[8];

fn loop_break_to_here(loop_break) {
    if(loop_break_to_here_ptr[0]) {
        @call(loop_break_to_here_ptr[0], loop_break);
    } else {
        tokenizer.error("loop_break_to_here not implemented!");
    }
}

zeroes if_condition_ptr[8];

fn if_condition() {
    if(if_condition_ptr[0]) {
        @call(if_condition_ptr[0]);
    } else {
        tokenizer.error("if_condition not implemented!");
    }
}

zeroes else_block_start_ptr[8];

fn else_block_start() {
    if(else_block_start_ptr[0]) {
        @call(else_block_start_ptr[0]);
    } else {
        tokenizer.error("else_block_start not implemented!");
    }
}

zeroes else_block_end_ptr[8];

fn else_block_end() {
    if(else_block_end_ptr[0]) {
        @call(else_block_end_ptr[0]);
    } else {
        tokenizer.error("else_block_end not implemented!");
    }
}

zeroes no_else_block_ptr[8];

fn no_else_block() {
    if(no_else_block_ptr[0]) {
        @call(no_else_block_ptr[0]);
    } else {
        tokenizer.error("no_else_block not implemented!");
    }
}

zeroes save_eval_value_ptr[8];

fn save_eval_value() {
    if(save_eval_value_ptr[0]) {
        @call(save_eval_value_ptr[0]);
    } else {
        tokenizer.error("save_eval_value not implemented!");
    }
}

zeroes add_elf_entry_point_ptr[8];

fn add_elf_entry_point(entry_point) {
    if(add_elf_entry_point_ptr[0]) {
        @call(add_elf_entry_point_ptr[0], entry_point);
    } else {
        tokenizer.error("add_elf_entry_point not implemented!");
    }
}

zeroes do_inplace_op_ptr[8];

fn do_inplace_op(lhs_type, lhs_value, op, rhs_type, rhs_value) {
    if(do_inplace_op_ptr[0]) {
        @call(do_inplace_op_ptr[0], lhs_type, lhs_value, op, rhs_type, rhs_value);
    } else {
        tokenizer.error("do_inplace_op not implemented!");
    }
}

zeroes do_binary_op_ptr[8];

fn do_binary_op(lhs_type, lhs_value, op, rhs_type, rhs_value) {
    if(do_binary_op_ptr[0]) {
        @call(do_binary_op_ptr[0], lhs_type, lhs_value, op, rhs_type, rhs_value);
    } else {
        tokenizer.error("do_binary_op not implemented!");
    }
}

zeroes do_unary_op_ptr[8];

fn do_unary_op(op, operand_type, operand_value) {
    if(do_unary_op_ptr[0]) {
        @call(do_unary_op_ptr[0], op, operand_type, operand_value);
    } else {
        tokenizer.error("do_unary_op not implemented!");
    }
}

fn collapse_lhs(ident) {
    switch(peek_type()) {
    case tokenizer.dot:
        if(idents.node_get_type(ident) == itypes.variable_scope) {
            discard();
        } else {
            tokenizer.error("Expected a variable scope before `.`");
            unreachable;
        }
    }
}

zeroes eval_type[8];
// Only if comptime int
zeroes eval_value[8];

comptime primary_expr_only = 0;
comptime any_unambigous_expr = 1;

fn eval_inplace_op(lhs_type, lhs_value, op, rhs_type, rhs_value) {
    switch(lhs_type) {
        tokenizer.error("Invalid lhs for inplace op");

    case itypes.global_variable:
    case itypes.local_variable:
    case itypes.runtime_reference:
        do_inplace_op(lhs_type, lhs_value, op, rhs_type, rhs_value);
        return;
    }
}

fn eval_binary_op(lhs_type, lhs_value, op, rhs_type, rhs_value) {
    eval_type[0] = itypes.runtime_int;

    loop { // loop only so that we can break it
        if(lhs_type == itypes.comptime_int) {
            if(rhs_type == itypes.comptime_int) {
                eval_type[0] = itypes.comptime_int;

                switch(op) {
                    @todo("eval_binary_op comptime eval default op");

                case tokenizer.less_than:
                    eval_value[0] = lhs_value < rhs_value;
                    endcase;

                case tokenizer.greater_than:
                    eval_value[0] = lhs_value > rhs_value;
                    endcase;

                case tokenizer.less_than_equal:
                    eval_value[0] = lhs_value <= rhs_value;
                    endcase;

                case tokenizer.greater_than_equal:
                    eval_value[0] = lhs_value >= rhs_value;
                    endcase;

                case tokenizer.bitand:
                    eval_value[0] = lhs_value & rhs_value;
                    endcase;

                case tokenizer.bitor:
                    eval_value[0] = lhs_value | rhs_value;
                    endcase;

                case tokenizer.bitxor:
                    eval_value[0] = lhs_value ^ rhs_value;
                    endcase;

                case tokenizer.addition:
                    eval_value[0] = lhs_value + rhs_value;
                    endcase;

                case tokenizer.subtraction:
                    eval_value[0] = lhs_value - rhs_value;
                    endcase;

                case tokenizer.multiplication:
                    eval_value[0] = lhs_value * rhs_value;
                    endcase;

                case tokenizer.modulus:
                    eval_value[0] = lhs_value % rhs_value;
                    endcase;

                case tokenizer.division:
                    eval_value[0] = lhs_value / rhs_value;
                    endcase;
                }
                return;
            } else {
                // Operand inversion can help with eliminating comptime_ints from
                // the lhs, which allows the backend to generate better code
                switch(op) {
                    @todo("do_binary_op invert default");

                case tokenizer.less_than:
                    op = tokenizer.greater_than_equal;
                    endcase;

                case tokenizer.less_than_equal:
                    op = tokenizer.greater_than;
                    endcase;

                case tokenizer.greater_than:
                    op = tokenizer.less_than_equal;
                    endcase;

                case tokenizer.greater_than_equal:
                    op = tokenizer.less_than;
                    endcase;

                case tokenizer.subtraction:
                    // First do the inversion
                    do_binary_op(rhs_type, rhs_value, op, lhs_type, lhs_value);

                    // Then negate the value
                    do_unary_op(tokenizer.subtraction, itypes.runtime_int);
                    return;

                // Cannot be inverted
                case tokenizer.shift_right:
                case tokenizer.shift_left:
                case tokenizer.modulus:
                case tokenizer.division:
                    break;

                // Commutative, no inversion needed
                case tokenizer.addition:
                case tokenizer.multiplication:
                case tokenizer.bitand:
                case tokenizer.bitor:
                case tokenizer.bitxor:
                case tokenizer.equals:
                case tokenizer.not_equals:
                    // endcase;
                }
                return do_binary_op(rhs_type, rhs_value, op, lhs_type, lhs_value);
            }
        } else {
            switch(rhs_type) {
                endcase;

            case itypes.comptime_int:
                switch(lhs_type) {
                    endcase;

                case itypes.local_buffer_addr:
                case itypes.global_buffer_addr:
                case itypes.function_addr:
                    eval_type[0] = lhs_type;
                    eval_value[0] = lhs_value;

                    switch(op) {
                        endcase;

                    case tokenizer.addition:
                        eval_value[0] += rhs_value;
                        return;

                    case tokenizer.subtraction:
                        eval_value[0] -= rhs_value;
                        return;

                    case tokenizer.bitor:
                    case tokenizer.bitand:
                    case tokenizer.bitxor:
                    case tokenizer.multiplication:
                    case tokenizer.division:
                    case tokenizer.modulus:
                    case tokenizer.bitnot:
                        // @TODO: Do these at comptime if PIE disabled
                    }
                }
                // endcase;
            }
        }
    }
    return do_binary_op(lhs_type, lhs_value, op, rhs_type, rhs_value);
}

fn eval_unary_op(op, operand_type, operand_value) {
    if(operand_type == itypes.comptime_int) {
        eval_type[0] = itypes.comptime_int;
        switch(op) {
            @todo("eval_unary_op comptime_int default op");

        case tokenizer.subtraction: // Unary arithmetic negation
            eval_value[0] = -operand_value;
            return;

        case tokenizer.bitnot: // Unary bitwise negation
            eval_value[0] = ~operand_value;
            return;
        }
    } else {
        do_unary_op(op, operand_type, operand_value);
        eval_type[0] = itypes.runtime_int;
        return;
    }
}

fn eval_expr(expr_mode) [lhs_type, lhs_value, op, rhs_type, rhs_value, rewind_buffer[rewind_buffer_size]] {
    op = peek_type();

    switch(op) {
        tokenizer.error("Expected primary expression");
        endcase;

    case tokenizer.bitnot:
    case tokenizer.subtraction:
        discard();
        eval_expr(primary_expr_only);

        lhs_type = eval_type[0];
        lhs_value = eval_value[0];

        eval_unary_op(op, lhs_type, lhs_value);

        lhs_type = eval_type[0];
        lhs_value = eval_value[0];
        endcase;

    case tokenizer.open_paren:
        discard();
        eval_expr(any_unambigous_expr);

        lhs_type = eval_type[0];
        lhs_value = eval_value[0];

        expect_token(tokenizer.closing_paren, "Expected `)` after expression");
        discard();
        endcase;

    case tokenizer.int_literal:
        lhs_value = peek_value();
        discard();
        lhs_type = itypes.comptime_int;
        endcase;

    case tokenizer.string_literal:
        // Length, include null terminator
        lhs_value = peek_value() + 1;

        lhs_value = writer.intern_string(tokenizer.buffer, lhs_value, writer.rodata);
        lhs_type = itypes.global_buffer_addr;
        discard();

        endcase;

    case tokenizer.identifier:
        lhs_value = peek_value();
        lhs_type = idents.node_get_type(lhs_value);

        discard();

        if(lhs_type == itypes.variable_scope) {
            loop {
                lhs_value = idents.node_get_attribute(lhs_value);
                if(peek_type() == tokenizer.dot) {
                    discard();

                    lhs_value = tokenizer.expect_token(tokenizer.identifier, "Expected identifier after `.`", lhs_value);
                    discard();

                    lhs_type = idents.node_get_type(lhs_value);

                    switch(lhs_type) {
                        break;
                    case itypes.none:
                        tokenizer.error("Unknown identifier!");
                    case itypes.variable_scope:
                        continue;
                    }
                } else {
                    break;
                }
            }
        } else { }

        switch(lhs_type) {
            lhs_value = idents.node_get_value(lhs_value);
            endcase;

        case itypes.none:
            tokenizer.error("Unknown identifier!");

        case itypes.local_buffer:
            lhs_type = itypes.local_buffer_addr;
            lhs_value = idents.node_get_value(lhs_value);
            endcase;

        case itypes.global_buffer:
            lhs_type = itypes.global_buffer_addr;
            lhs_value = idents.node_get_value(lhs_value);
            endcase;
            // endcase;
        }

        switch(peek_type()) {
            endcase;

        case tokenizer.open_square_bracket:
            discard();

            eval_expr(any_unambigous_expr);

            switch(eval_type[0]) {
                // Runtime index. Darn.
                rhs_type = eval_type[0];
                rhs_value = eval_value[0];
                do_binary_op(lhs_type, 0, tokenizer.addition, rhs_type, rhs_value);
                lhs_type = itypes.runtime_reference;
                endcase;

            case itypes.comptime_int:
                switch(lhs_type) {
                case itypes.runtime_int:
                case itypes.local_variable:
                case itypes.global_variable:
                    rhs_value = eval_value[0];
                    do_binary_op(lhs_type, lhs_value, tokenizer.addition, itypes.comptime_int, rhs_value);
                    lhs_type = itypes.runtime_reference;
                    endcase;

                case itypes.local_buffer_addr:
                    lhs_type = itypes.local_variable;
                    lhs_value += eval_value[0];
                    endcase;

                case itypes.global_buffer_addr:
                    lhs_type = itypes.global_variable;
                    lhs_value += eval_value[0];
                    //endcase;
                }
                // endcase;
            }

            tokenizer.expect_token(tokenizer.closing_square_bracket, "Expected `]` after subscript index");
            tokenizer.discard();
            endcase;

        case tokenizer.open_paren:
            discard();

            switch(lhs_type) {
                @todo("call ident default case");
                endcase;

            case itypes.local_variable:
                @todo("local_variable call");

            case itypes.local_buffer_addr:
                @todo("local_buffer_addr call");

            case itypes.global_variable:
                @todo("global_variable call");

            case itypes.global_buffer_addr:
                @todo("global_buffer_addr call");

            case itypes.comptime_int:
            case itypes.function_addr:
                do_call_addr(lhs_value);
                lhs_type = itypes.runtime_int;
                endcase;

            case itypes.builtin_function_codegen:
                @call(lhs_value);

                lhs_value = 0x41414141;
                lhs_type = itypes.runtime_int;
                endcase;

            case itypes.builtin_function_comptime:
                lhs_value = @call(lhs_value);
                lhs_type = itypes.comptime_int;
                // endcase;
            }

            tokenizer.expect_token(tokenizer.closing_paren, "Expected ')' after argument list");
            tokenizer.discard();
            endcase;
        }
    }

    eval_type[0] = lhs_type;
    eval_value[0] = lhs_value;

    if(expr_mode == primary_expr_only) {
        return;
    } else {
        op = peek_type();
        switch(op) {
            @todo("eval_expr default op");

        case tokenizer.closing_paren:
        case tokenizer.closing_curly_brace:
        case tokenizer.closing_square_bracket:
        case tokenizer.end_of_file:
        case tokenizer.comma:
        case tokenizer.semicolon:
        case tokenizer.colon:
        case tokenizer.dot_dot_dot:
            return;

        case tokenizer.assignment:
        case tokenizer.addition_inplace:
        case tokenizer.subtraction_inplace:
        case tokenizer.bitand_inplace:
        case tokenizer.bitor_inplace:
        case tokenizer.bitxor_inplace:
        case tokenizer.shift_right_inplace:
        case tokenizer.shift_left_inplace:
        case tokenizer.multiplication_inplace:
        case tokenizer.modulus_inplace:
        case tokenizer.division_inplace:
            discard();

            if(lhs_type == itypes.runtime_reference) {
                rewind_save(rewind_buffer);
                save_eval_value();
            } else { }

            eval_expr(any_unambigous_expr);
            rhs_type = eval_type[0];
            rhs_value = eval_value[0];

            if(lhs_type == itypes.runtime_reference) {
                if(rhs_type == itypes.comptime_int) {
                    rewind_restore(rewind_buffer);
                } else { }
            } else { }

            eval_inplace_op(lhs_type, lhs_value, op, rhs_type, rhs_value);
            eval_type[0] = itypes.runtime_int; // TODO: Set undefined type here when available
            return;

        case tokenizer.less_than:
        case tokenizer.less_than_equal:
        case tokenizer.greater_than:
        case tokenizer.greater_than_equal:
        case tokenizer.equals:
        case tokenizer.not_equals:
        case tokenizer.bitor:
        case tokenizer.bitxor:
        case tokenizer.bitand:
        case tokenizer.division:
        case tokenizer.modulus:
        case tokenizer.multiplication:
        case tokenizer.addition:
        case tokenizer.subtraction:
            discard();

            switch(lhs_type) {
                endcase;
            case itypes.runtime_int:
            case itypes.runtime_reference:
                rewind_save(rewind_buffer);
                save_eval_value();
                // endcase;
            }

            eval_expr(primary_expr_only);
            rhs_type = eval_type[0];
            rhs_value = eval_value[0];

            if(rhs_type == itypes.comptime_int) {
                switch(lhs_type) {
                    endcase;
                case itypes.runtime_int:
                case itypes.runtime_reference:
                    rewind_restore(rewind_buffer);
                    // endcase;
                }
            } else { }

            eval_binary_op(lhs_type, lhs_value, op, rhs_type, rhs_value);
            return;

        case tokenizer.question_mark:
            @todo("eval_expr ternary expr");
        //     discard();
        //     // Ternary operator
        //     extra_type = lhs_type;
        //     extra_value = lhs_value;

        //     eval_expr(any_unambigous_expr);

        //     lhs_type = eval_type[0];
        //     lhs_value = eval_value[0];

        //     expect_token(tokenizer.colon, "Expected `:` after expression");
        //     discard();

        //     eval_expr(any_unambigous_expr);

        //     rhs_type = eval_type[0];
        //     rhs_value = eval_value[0];

        //     @todo("eval_expr ternary impl");
        }
    }
}

fn eval_comptime_expr(mode) {
    eval_expr(mode);
    if(eval_type[0] == itypes.comptime_int) {
        return eval_value[0];
    } else {
        tokenizer.error("Non-comptime expr eval!");
    }
}

comptime max_switch_values = 0x80;
comptime switch_table_entry_size = 4;
comptime switch_table_size = switch_table_entry_size * max_switch_values;

fn set_switch_case_here(case_value) [ptr, offset] {
    if(case_value >= max_switch_values) {
        printer.log_hex("Case value", case_value);
        tokenizer.error("Switch case value out of range!");
    } else {
        offset = writer.code_addr() - switch_default_addr[0];
        ptr = switch_table[0] + (case_value * switch_table_entry_size);
        writer.patch32(offset, writer.rodata, ptr);
    }
}

fn parse_block() [tmp, save0, save1, save2] {
    expect_token(tokenizer.open_curly_brace, "Expected `{` at the start of block");
    discard();
    
    loop {
        switch(peek_type()) {
            // Anything else is probably an expression.
            eval_expr(any_unambigous_expr);

            expect_token(tokenizer.semicolon, "Expected `;` after expression");
            discard();

            switch(eval_type[0]) {
                // Discarding anything else is probably an error
                tokenizer.error("Can't discard this value!");

                // These are fine to discard as they could be function return values
                // or in-place operations
            case itypes.runtime_int:

            }

            // @TODO: Figure out if expression (function call) was noreturn,
            // and if so, endcase instead of continuing
            continue;

        case tokenizer.keyword_case:
            discard();

            save0 = eval_comptime_expr();
            if(peek_type() == tokenizer.dot_dot_dot) {
                discard();
                save1 = eval_comptime_expr();
            } else {
                save1 = save0;
            }

            loop {
                set_switch_case_here(save0);

                if(save0 == save1) {
                    break;
                } else {
                    save0 += 1;
                    continue;
                }
            }

            expect_token(tokenizer.colon, "Expected `:` after case value");
            discard();

            continue;

        case tokenizer.keyword_break:
            discard();
            expect_token(tokenizer.semicolon, "Expected `;` after `break`");
            discard();

            break_was_used[0] = 1;
            tmp = break_addr[0];
            jmp_to(tmp);
        case tokenizer.keyword_unreachable:
            endcase;

        case tokenizer.keyword_loop:
            discard();

            // Store away old values
            tmp = @read64(break_was_used);
            @write64(break_was_used, 0);

            save0 = @read64(break_addr);
            save1 = @read64(continue_addr);

            // Create new break fixup
            break_addr[0] = make_loop_break();
            continue_addr[0] = writer.code_addr();

            parse_block();

            expect_token(tokenizer.closing_curly_brace, "Expected `}` after loop body");
            discard();

            @write64(break_addr, save0);
            @write64(continue_addr, save1);

            if(@read64(break_was_used)) {
                @write64(break_was_used, tmp); // Restore old

                tmp = break_addr[0];
                loop_break_to_here(tmp);

                // The code after us is used!
                continue;
            } else {
                @write64(break_was_used, tmp); // Restore old
                // The code after us cannot be reached!
                endcase;
            }

        case tokenizer.keyword_if:
            discard();
            expect_token(tokenizer.open_paren, "Expected `(` after `if`");
            discard();

            eval_expr(any_unambigous_expr);

            expect_token(tokenizer.closing_paren, "Expected `)` after if conditional");
            discard();

            if(eval_type[0] == itypes.comptime_int) {
                @todo("comptime if");
            } else {
                tmp = if_condition();

                parse_block();

                expect_token(tokenizer.closing_curly_brace, "Expected `}` after if body");
                discard();

                if(peek_type() == tokenizer.keyword_else) {
                    discard();

                    // Jump at the end of the taken branch to after else
                    save0 = else_block_start(tmp);

                    parse_block();

                    expect_token(tokenizer.closing_curly_brace, "Expected `}` after else body");
                    discard();

                    // Else falls through

                    // Patch end of taken jmp to here
                    else_block_end(save0);
                } else {
                    no_else_block(tmp);
                }

                // @TODO: Check which of the branches can exit the scopes, and do `endcase;` depending
                // on if both can
                continue;
            }

        case tokenizer.keyword_switch:
            discard();
            expect_token(tokenizer.open_paren, "Expected `(` after `switch`");
            discard();

            eval_expr(any_unambigous_expr);

            expect_token(tokenizer.closing_paren, "Expected `)` after if conditional");
            discard();

            tmp = switch_table[0];
            save0 = endcase_was_used[0];
            save1 = endcase_addr[0];
            save2 = switch_default_addr[0];

            endcase_was_used[0] = 0;
            endcase_addr[0] = make_switch();
            switch_table[0] = writer.section_addr(writer.rodata);
            switch_default_addr[0] = writer.code_addr();

            writer.write_generic(0, writer.rodata, switch_table_size);

            parse_block();

            expect_token(tokenizer.closing_curly_brace, "Expected `}` after switch block");
            discard();

            switch_table[0] = tmp;
            endcase_was_used[0] = save0;
            endcase_addr[0] = save1;
            switch_default_addr[0] = save2;

            // @TODO: Check if endcase was used or block was fell through to determine deadness
            // after switch() {}
            continue;

        case tokenizer.keyword_endcase:
            discard();
            expect_token(tokenizer.semicolon, "Expected `;` after `endcase`");
            discard();

            endcase_was_used[0] = 1;
            tmp = endcase_addr[0];
            jmp_to(tmp);
            endcase;

        case tokenizer.keyword_continue:
            discard();
            expect_token(tokenizer.semicolon, "Expected `;` after `continue`");
            discard();

            tmp = continue_addr[0];
            jmp_to(tmp);
            endcase;

        case tokenizer.keyword_return:
            discard();
            if(peek_type() != tokenizer.semicolon) {
                eval_expr();
            } else {
                // This should make the backend not produce any code *crosses fingers*
                eval_type[0] = itypes.runtime_int;
            }
            return_evaluated();
            expect_token(tokenizer.semicolon, "Expected `;` after `return` statment");
            discard();
            endcase;

        case tokenizer.closing_curly_brace:
            return;
        }

        // Loop here util we have non-dead code (case comes around and enters here or we exit scope)
        loop {
            switch(peek_type()) {
                tokenizer.error("Dead code");

            case tokenizer.keyword_unreachable:
                discard();
                expect_token(tokenizer.semicolon, "Expected `;` after `unreachable`");
                discard();
                continue;

            case tokenizer.keyword_case:
                break;

            case tokenizer.closing_curly_brace:
                return;
            }
        }
        continue;
    }
}
